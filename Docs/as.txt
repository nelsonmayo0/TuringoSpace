package com.example.telepelis.ui.main

import android.content.Intent
import android.graphics.Color
import android.os.Bundle
import android.util.Log
import android.view.Gravity
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import android.widget.Toast
import androidx.core.app.ActivityOptionsCompat
import androidx.core.content.ContextCompat

import androidx.fragment.app.viewModels
import androidx.leanback.app.BrowseSupportFragment
import androidx.leanback.widget.*
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.lifecycleScope
import androidx.lifecycle.repeatOnLifecycle
import com.example.telepelis.R
import com.example.telepelis.data.repository.MoviesRepository
import com.example.telepelis.domain.Category
import com.example.telepelis.domain.Movie
import com.example.telepelis.ui.detail.AboutDetails
import com.example.telepelis.ui.detail.DetailActivity
import kotlinx.coroutines.launch

class MainFragment : BrowseSupportFragment() {

    private val backgroundState = BackgroundState(this)

    private val vm by viewModels<MainViewModel> {
        MainViewModelFactory(MoviesRepository(getString(R.string.api_key)))
    }
    private val rowsAdapter = ArrayObjectAdapter(ListRowPresenter())

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        title = getString(R.string.browse_title)

        adapter = rowsAdapter

        onItemViewSelectedListener = OnItemViewSelectedListener { _, movie, _, _ ->
            (movie as? Movie)?.let { backgroundState.loadUrl(movie.backdrop) }
        }

        viewLifecycleOwner.lifecycleScope.launch {
            viewLifecycleOwner.repeatOnLifecycle(Lifecycle.State.CREATED) {
                vm.state.collect {
                    if (it.isLoading) progressBarManager.show() else progressBarManager.hide()
                    updateUi(it.categories)
                }
            }
        }

        vm.onUiReady()
        setupEventListeners()
        /*onItemViewClickedListener = ItemViewClickedListener()*/

    }

    private fun updateUi(categories: Map<Category, List<Movie>>) {
        rowsAdapter.clear()

        //Peliculas
        val cardPresenter = CardPresenter()
        categories.forEach { (category, movies) ->
            val listRowAdapter = ArrayObjectAdapter(cardPresenter).apply {
                addAll(0, movies)
            }

            val header = HeaderItem(category.name)
            rowsAdapter.add(ListRow(header, listRowAdapter))
        }

        //Acerca de ...
        val gridHeader = HeaderItem(NUM_ROWS.toLong(), "ACERCA DE")

        val mGridPresenter = GridItemPresenter()
        val gridRowAdapter = ArrayObjectAdapter(mGridPresenter)
        gridRowAdapter.add(resources.getString(R.string.grid_about))
        rowsAdapter.add(ListRow(gridHeader, gridRowAdapter))

        adapter = rowsAdapter

    }

    private fun setupEventListeners() {

        setOnSearchClickedListener {
            Toast.makeText(activity, "Esta parte est√° en de desarrollo", Toast.LENGTH_LONG)
                .show()
        }
        onItemViewClickedListener = ItemViewClickedListener()
    }

    // Al realizar click
    private inner class ItemViewClickedListener : OnItemViewClickedListener {
        override fun onItemClicked(
            itemViewHolder: Presenter.ViewHolder,
            item: Any,
            rowViewHolder: RowPresenter.ViewHolder,
            row: Row
        ) {
            if (item is Movie) {
                print("asa")
                Log.d(TAG, "Item: " + item.toString())
                val intent = Intent(activity!!, DetailActivity::class.java)
                intent.putExtra(DetailActivity.MOVIE_EXTRA, item)
                val bundle = ActivityOptionsCompat.makeSceneTransitionAnimation(
                    activity!!,
                    (itemViewHolder.view as ImageCardView).mainImageView,
                    DetailActivity.SHARED_ELEMENT_NAME
                ).toBundle()
                startActivity(intent, bundle)
            } else if (item is String) {
                print("aa1")
                Log.d(TAG, "Item: " + item.toString())
                if (item.contains(getString(R.string.grid_about))) {
                    val intent =Intent(activity, AboutDetails::class.java)
                    val bundle = ActivityOptionsCompat.makeSceneTransitionAnimation(
                        activity!!,
                        (itemViewHolder.view as TextView),
                        DetailActivity.SHARED_ELEMENT_NAME
                    ).toBundle()
                    startActivity(intent, bundle)
                }
            }
        }
    }


    private inner class GridItemPresenter : Presenter() {
        override fun onCreateViewHolder(parent: ViewGroup): Presenter.ViewHolder {
            val view = TextView(parent.context)
            view.layoutParams = ViewGroup.LayoutParams(GRID_ITEM_WIDTH, GRID_ITEM_HEIGHT)
            view.isFocusable = true
            view.isFocusableInTouchMode = true
            view.setBackgroundColor(ContextCompat.getColor(activity!!, R.color.about_background))
            view.setTextColor(Color.WHITE)
            view.gravity = Gravity.CENTER
            return Presenter.ViewHolder(view)
        }

        override fun onBindViewHolder(viewHolder: Presenter.ViewHolder, item: Any) {
            (viewHolder.view as TextView).text = item as String
        }

        override fun onUnbindViewHolder(viewHolder: Presenter.ViewHolder) {}
    }

    companion object {
        private val TAG = "MainFragment"
        private val BACKGROUND_UPDATE_DELAY = 300
        private val GRID_ITEM_WIDTH = 200
        private val GRID_ITEM_HEIGHT = 200
        private val NUM_ROWS = 6
    }


    override fun setHeaderPresenterSelector(headerPresenterSelector: PresenterSelector?) {
        super.setHeaderPresenterSelector(headerPresenterSelector)
    }
}